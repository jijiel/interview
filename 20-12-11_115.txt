1.is a 관계와 has a 관계에 대하여 설명하시오.

상속 관계에 있는 두 대상은 IS-A 관계를 가져야 한다.
IS-A: (자식)~는 (부모) ~다.로 표현 되는 것 

Life is a journey. // IS-A 관계이라기엔 추상적인 개념(소프트웨어 적으로 이상함)이라 의심해봐야 한다.

ex) 노트북은 컴퓨터이다. 전기자동차는 자동차이다.
IS-A 관계를 갖지 않는 두 클래스가 상속으로 연결되어 있다면, 적절한 상속인지 의심해야 한다. (중요)

is - a : 상속, 객체의 관계를 얘기하는 것 (~이면 ~이다.)
has - a : CPU는 컴퓨터이다. 컴퓨터에 뭐가있냐 하면 아래처럼 표현 될 것 
완벽한 is-a 관계가 아니면 has-a로 표현 하기 

예시)

class Computer{
Cpu cpu;
Mainboard mainboard;
Memory ...;

}

class Person{
Heart heart;
Finger finger;

}

​

2.다형성이란 무엇인가?

다형성 (부모 = 자식(without 형변환) // 반대는 안됨 (자식먼저는 안됨) 

예시)

가능
A a = new A();
B b = new B();
A ab = new B();

불가능
B ba = new A();

​

3.아래가 되지 않는 이유에 대하여 메모리 그림으로 설명하시오.​

MobilePhone(부모) SmartPhone(자식)

SmartPhone s = new MobilePhone();

​



​

4.메소드 오버라이딩 이란?

메소드 오버라이딩

오버라이딩을 사용하려면 반드시 상속관계가 있어야한다.

​
public void yummy() { ...}
상속관계에서 부모와 자식의 함수 리턴타입(예)void), 함수 이름(예)yummy), 파라미터(예)( ))까지 전부 같다.
다른것은 구현 내용만 달라진다 {여기 안에 있는것 }
덮어쓴다는 개념 

​

오버라이딩은 자식꺼!
다른것은 구현 내용 {여기 안에 있는것 }인데
자식껄로 부모꺼를 저 내용을 덮어쓴다.
메모리로 생각하면 자식이 덮어쓰면 부모는 메모리의 주소를 바꿔버린다.

​

5.갬블링 게임을 만들어보자. 

두 사람이 게임을 진행한다. 이들의 이름을 키보드로 입력 받으며 각 사람은 Person 클래스로 작성하라. 그러므로 프로그램에는 2개의 Person 객체가 생성되어야 한다. 두 사람은 번갈아 가면서 게임을 진행하는데 각 사람이 자기 차례에서 <Enter> 키를 입력하면, 3개의 난수가 발생되고 이 숫자가 모두 같으면 승자가 되고 게임이 끝난다. 난수의 범위를 너무 크게 잡으면 3개의 숫자가 일치하게 나올 가능성이 적기 때문에 숫자의 범위는 1~3까지로 한다.

​
1번째 선수 이름>>수희

2번째 선수 이름>>연수

[수희]:

3 1 1 아쉽군요!

[연수]:

3 1 3 아쉽군요!

[수희]:

2 2 1 아쉽군요!

[연수]:

1 1 2 아쉽군요!

[수희]:

3 3 3 수희님이 이겼습니다!

public class GamblingMain {

	public static void main(String[] args) {
		Gambling gb = new Gambling();
		gb.GameRun();

	}

}
import java.util.Scanner;

public class Gambling {
	
	Gambling(){
		
	}
	
	public void GameRun() {
		Scanner scan = new Scanner(System.in);
				
			
		System.out.print("1번째 선수 이름>> ");
		Person p1 = new Person(scan.next());
		System.out.print("2번째 선수 이름>> ");
		Person p2 = new Person(scan.next());
				
		while(true) {
			
				if(p1.play()) {
					System.out.println(p1.getPerson()+"이 이겼습니다!");
					break;
				}else { 
					System.out.println("아쉽군요!");
					
				}	
				if(p2.play()) {
					System.out.println(p2.getPerson()+"이 이겼습니다!");
					break;
				}else { 
					System.out.println("아쉽군요!");
					
				}	
		}
	}
}

class Person{
	private String person;
	int [] num = new int[3];
	int i = 0;
	
	
	Person(){
		
	}
		
	Person(String person){
		this.person = person;
	}
	
	public String getPerson() {
		return person;
	}

	public void setPerson(String person) {
		this.person = person;
	}
	
	boolean play() {
		
		Scanner scan = new Scanner(System.in);
		
		System.out.print("["+person+"]: <Enter>");
		scan.nextLine();
		for(i=0; i<num.length;i++) {
			num[i] = (int)(Math.random()*3)+1;
			System.out.print(num[i]+" ");
		}
		if((num[0]==num[1])&&(num[0]==num[2])) {
			return true;
		}else
			return false;
	}
}


​

6.갬블링 게임을 n명이 하도록 수정하라. 실행 예시와 같이 게임에 참여하는 선수의 수를 입력받고 각 선수의 이름을 입력받도록 수정하라.

​
겜블링 게임에 참여할 선수 숫자>>3

1번째 선수 이름>>황

2번째 선수 이름>>이

3번째 선수 이름>>김

[황]:

2 3 3 아쉽군요!

[이]:

1 2 2 아쉽군요!

[김]:

2 2 3 아쉽군요!

[황]:

3 2 2 아쉽군요!

[이]:

1 1 3 아쉽군요!

[김]:

2 2 1 아쉽군요!

[황]:

2 2 2 황님이 이겼습니다!

​
package Fri;

import java.util.Scanner;

public class Gambling2 {
	
	Gambling2(){
		
	}
	
	public void GameRun() {
		Scanner scan = new Scanner(System.in);
		
		System.out.print("겜블링 게임에 참여할 선수 숫자>>");
		int party = scan.nextInt();	
		Person2 [] p = new Person2[party];
		for(int j = 0; j<party; j++) {
			System.out.print((j+1)+"번째 선수 이름>> ");
			p[j] = new Person2(scan.next());
		}

		while(true) {
			for(int j=0; j<party;j++) {
				if(p[j].play()) {
					System.out.println(p[j].getPerson2()+"이 이겼습니다!");
					break;
				}else { 
					System.out.println("아쉽군요!");
					
				}
			}
		}
		
	}
}

class Person2{
	private String person2;
	int [] num = new int[3];
	int i = 0;
	
	
	Person2(){
		
	}
		
	Person2(String person2){
		this.person2 = person2;
	}
	
	public String getPerson2() {
		return person2;
	}

	public void setPerson2(String person) {
		this.person2 = person;
	}
	
	boolean play() {
		
		Scanner scan = new Scanner(System.in);
		
		System.out.print("["+person2+"]: <Enter>");
		scan.nextLine();
		for(i=0; i<num.length;i++) {
			num[i] = (int)(Math.random()*3)+1;
			System.out.print(num[i]+" ");
		}
		if((num[0]==num[1])&&(num[0]==num[2])) {
			return true;
		}else
			return false;
	}
}

	




​

7.다음을 만족하는 클래스 Employee를 작성하시오
(8번문제부터는 이것과 관련된 문제입니다).

- 클래스 Employee(직원)은 클래스 Regular(정규직)와 Temporary(비정규직)의 상위 클래스
- 필드: 이름, 나이, 주소, 부서, 월급 정보를 필드로 선언
- 생성자 : 이름, 나이, 주소, 부서를 지정하는 생성자 정의
-메소드 printInfo() : 인자는 없고 자신의 필드 이름, 나이, 주소, 부서를 출력

​public class Employee {
	private String name, address, dep;
	private int age;
	
	public Employee(String name, int age, String address, String dep){
		this.name = name;
		this.age = age;
		this.address = address;
		this.dep = dep;
		
	}

	void PrintInfo() {
		System.out.println("이름: "+name);
		System.out.println("나이: "+age);
		System.out.println("주소: "+address);
		System.out.println("부서: "+dep);
		
	}
}

​

​

8. 다음을 만족하는 클래스 Regular를 작성하시오.
​
- 클래스 Regular는 위에서 구현된 클래스 Employee의 하위 클래스
- 생성자 : 이름, 나이, 주소, 부서를 지정하는 상위 생성자 호출
- Setter : 월급 정보 필드를 지정
- 메소드 printInfo() : 인자는 없고 "정규직"이라는 정보와 월급을 출력

​
class Regular extends Employee{
	private int setter;
	
	public Regular(String name, int age, String address, String dep){
		super(name, age, address, dep);
	}
	
	public int getSetter() {
		return setter;
	}

	public void setSetter(int setter) {
		this.setter = setter;
	}
	
	void PrintInfo() {
		System.out.println("정규직");
		System.out.println("월급: "+setter);
	}
}

class Temporary extends Employee{
	private int setter;
	
	public Temporary(String name, int age, String address, String dep){
		super(name, age, address, dep);
	}
	
	public int getSetter() {
		return setter;
	}

	public void setSetter(int setter) {
		this.setter = setter;
	}
	
	void PrintInfo() {
		System.out.println("비정규직");
		System.out.println("월급: "+setter);
	}
}
