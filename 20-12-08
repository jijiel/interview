1.String 클래스에서 concat 메서드를 설명하시오.

​

- String 클래스의 메소드(함수) 중의 하나로 문자열을 연결시키는 기능​을 한다.

  문자형 자체는 Immutable 이기 때문에 값이 변경이 안돼서 따로 각각 메모리에 잡는다.

​

  ex)

  String st1 = "Coffee";                   >> 이 자체가 Immutable

  String st2 = "Bread";

  String st3=st1.concat(st2);           >> concat 의 의미는 붙이는 거 

  > 메모리로 하면 커피가 들어간 메모리 st1, st2 는 브레드가 들어간 메모리이면 st3에서는 커피 브레드 인 새로운 메모리

  String st4="Fresh".concat(st3);    >> "Fresh" 스트링으로 처리해서 사용 가능

​

2.str.substring(2, 4); substring 사용법에 대하여 설명하시오.

​

- substring 은 문자열의 일부를 추출 할 때 사용 

   

String > 문자열(문자의 모임)로 자체에 배열이 있음

​

ex)

abcdefg (0123456의 방에 들어있음)

str.substring(2);         >> 2번째 이후 부터 출력 cdefg

str.substring(2, 4);    >> 2~3번째 까지 출력 

>>> 이 두개 함수 오버로딩 적용(인자 갯수가 다름)

​

3.st1.compareTo(st2);compareTo 사용법에 대하여 설명하시오.

​


​

- equals: 안에있는 글자 비교할때 사용

- compareTo: 사전 상에서 앞이냐 뒤냐를 물어봄

ex) 

cmp = st1.compareTo(st2);    >> 이 함수의 리턴 값 int 

if(cmp == 0)

System.out.println("두 문자열은 일치합니다.");

else if (cmp < 0)    >> st2가 더 크다 (사전순으로 했을때 더 뒷페이지에 나온다.), st1이 11page라면 st2는 12page

System.out.println("사전의 앞에 위치하는 문자: "+ st1);

else 

System.out.println("사전의 앞에 위치하는 문자: "+ st2);

​

- compareToIgnoreCase: 대소문자를 무시하고 비교해라.

​

4.String.valueOf 에 대하여 설명하시오.

​

- valueOf: 모든 타입을 문자열로 바꾼다.

​

String.valueOf(); 

​

static String valueOf(boolean b)

static String valueOf(char c)

static String valueOf(double d)

static String valueOf(float f)

static String valueOf(int i)

static String valueOf(long l)

 >> 함수 오버로딩

​

​

5. 아래의 연산과정에서 호출되는 함수(원리)를 써서 표현해 보세요.

String str = "age: " + 17;

​

- "age: " 와 17 의 형이 다르기 때문에 String str = "age: ".concat(17); 로 컴파일 되지 않는다.

- String str = "age: ".concat(String.valueOf(17)); 

   > String.valueOf(17) 함수를 사용하여 17을 문자열로 변경해야 한다.

​

- "funny"+"camp"  : +하면 문자열 이기 때문에 이어 붙여진다.

   컴파일러에 의한 자동 변환

   "funny".concat("camp") 와 같다.

​

   String str = "funny" 

   str += "camp"

   str = str.concat("camp")

​

​

6.StringBuilder 와 String 의 차이는?

​

- 문자열을 여러개 결합 할 경우 String 으로 결합 된다면 한개한개의 객체를 다 만들기 때문에 너무많은 인스턴스(객체) 생성됨

 >> 속도가 느려지게 되고 특히 스트링 포문을 돌리면 비용이 많이 든다. 메모리 양을 많이 차지 

​

- StringBuilder를 이용 하게 된다면 StringBuilder에 대한 객체 생성 , 중간에 인스턴스 생성하지 않음

>> 얘는 mutable로 변할 수 있는 값이기 때문에 뒤에다 append 를 사용하여 새로 생성하지 않고 붙일 수 있다. ( 함수 오버로딩됨) 

​

​

7.String 을 이용하여 프로그래밍 하시오.

입력 : 990925-1012999

출력 : 990925 1012999

public class UseStringMain {

	public static void main(String[] args) {
		UseString us = new UseString();
		us.ResultPrint();
		

	}

}

import java.util.Scanner;

public class UseString {
	private String str;
	
	public UseString() {
		
	}
	
	public UseString(String str) {
		this.str = str;
		
	}

	public String getStr() {
		return str;
	}

	public void setStr(String str) {
		this.str = str;
	}
	
	public void Input() {
		Scanner scanner = new Scanner(System.in);
		str = scanner.next();
		scanner.close();
		
	}
	
	public void printOut() {
		String[] ar = str.split("-");
		System.out.println(ar[0]+" "+ar[1]);
	}
	
	public void ResultPrint() {
		Input();
		printOut();
	}
	
	

}

8.아래의 메모리 그림을 그리시오.

int[] ar1 = new int[5];



9.아래를 프로그래밍 하시오.(단 클래스로 구성할것)

입력:lee sunkyo

출력:first name: lee second name:sunkyo

public class NameMain {

	public static void main(String[] args) {
		Name name = new Name();
		name.fullnamePrint();

	}

}
import java.util.Scanner;

public class Name {
	
	private String fullname1;
	private String fullname2;
	
	public Name() {
		
	}
	
	public Name(String fullname1, String fullname2) {
		this.fullname1 = fullname1;
		this.fullname2 = fullname2;
	}

	public String getFullname1() {
		return fullname1;
	}

	public void setFullname1(String fullname1) {
		this.fullname1 = fullname1;
	}
	
	public String getFullname2() {
		return fullname2;
	}

	public void setFullname2(String fullname2) {
		this.fullname2 = fullname2;
	}

	public void inputName() {
		Scanner scan = new Scanner(System.in);
		System.out.println("이름을 입력하세요.");
		fullname1 = scan.next();
		fullname2 = scan.next();
		scan.close();
	}
	
	public void printName() {
		
		System.out.println("firstname : "+ fullname1);
		System.out.println("secondname : "+ fullname2);
		
	}
	
	public void fullnamePrint() {
		inputName();
		printName();
	}

}

10.아래를 프로그래밍 하시오.

​

입력 : 홍 길동 

출력 : 성 = 홍 이름 = 길동 

​

입력 : 홍길동 

출력 : 공백이 없군요. 다시 입력해주세요.

​

11.아래를 프로그래밍 하시오.

"Hello.java" 문자열에서 파일명과 확장자인 java를 분리시키는 프로그램을 짜시오.

​

입력: Hello.java

출력: 파일이름은:Hello 이며 확장자는 java 입니다.

​

입력: Java.avi 

출력: 파일이름은:Java 이며 확장자는 avi 입니다.

문제12. Scanner 클래스를 이용해서 한 줄 읽고, 공백으로 분리된 "단어"가 몇 개 들어 있는지 확인해보자.

​

"그만"을 입력할 때까지 반복하는 프로그램이다.힌트(split 함수를 이용해 볼것)

​

예) 입력 : Java Programming 

출력 : 단어의 개수는 2

입력 : 자바 수업은 2층 C클래스 

출력 : 단어의 개수는 4

입력 : 그만 > 출력 : 프로그램 종료

​

​

필수 7번 9번
